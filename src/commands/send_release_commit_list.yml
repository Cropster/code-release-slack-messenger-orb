description: >
  This command fetches the list of commits of the last tagged release and sends them to a Slack channel.
parameters:
  repo_name:
    type: string
    default: "NO-REPO"
    description: "Name of the repo present in the message header"
  slack_channel:
    type: string
    default: "$SLACK_WEBHOOK_URL	"
    description: "Channel where the full commit list will be sent"
steps:
  - run:
      name: Store commit list as an artifact and send it via Slack
      command: |
        #Install bc if it's not already installed
        sudo apt-get install bc
        
        #Fetch the last tagged code version and the timestamp of the previous version's last commit
        latest_tagged_released_version=$(mergestat "SELECT name FROM refs('/home/circleci/project') WHERE type = 'tag' AND name LIKE '%.%' ORDER BY name DESC LIMIT 2" --format json | jq -r '.[0].name' | sed 's|[v,]||g')
        reference_old_version=$(mergestat "SELECT name FROM refs('/home/circleci/project') WHERE type = 'tag' AND name LIKE '%.%' ORDER BY name DESC LIMIT 2" --format json | jq -r '.[1].name')
        first_commit_rv=$(git log --pretty=oneline $reference_old_version | awk '{print $1}' | head -n 1 || true) #Force exit 0 to avoid SIGPIPE exit code 141
        first_commit_rv_date=$(git show -s --format=%ci $first_commit_rv || true) #Force exit 0 to avoid SIGPIPE exit code 141
        formatted_rv_date="$(echo $first_commit_rv_date | head -n1 | awk '{print $1;}')"T"$(echo $first_commit_rv_date | head -n1 | awk '{print $2;}')"+01:00

        #Artifact creation: ASCII table containing the list of latest release's commits, starting right after the previous version's last commit timestamp.
        mkdir ./artifacts
        slack_artifact_header="# ----- Releasing C-SAR <<parameters.repo_name>> $latest_tagged_released_version with the following changes:  ------- #"
        echo "$slack_artifact_header" >> ./artifacts/commit_info_file.txt
        commit_table="$(mergestat "SELECT message, author_name, hash, committer_when as commit_timestamp FROM commits WHERE committer_when > '$formatted_rv_date' AND commits.parents < 2 ")"
        echo "$commit_table" >> ./artifacts/commit_info_file.txt

        #Slack message payload creation with the same data as the artifact
        slack_message_header=":rocket: Releasing C-SAR <<parameters.repo_name>> $latest_tagged_released_version with the following changes:"
        commit_list="$(mergestat "SELECT message, author_name, hash, committer_when as commit_timestamp FROM commits WHERE committer_when > '$formatted_rv_date' AND commits.parents < 2 " --format json | jq -sR | sed -e 's/\\//g' -e 's/^.\(.*\).$/\1/' -e 's/ "/ /g' -e 's/" / /g' -e 's/"n/ /g')"
        slack_message_body=$(echo "{\"blocks\": [{\"type\": \"header\",\"text\": {\"type\": \"plain_text\",\"text\": \"$slack_message_header\"}},{\"type\": \"divider\"}," )

        # Dynamic json structure creation for every existing commit
        for row in $(echo "${commit_list}" | jq -r '.[] | @base64')
        do
            author=$(echo ${row} | base64 --decode | jq -r '.author_name' )
            time=$(echo ${row} | base64 --decode | jq -r '.commit_timestamp' )
            time_fmt=$(date -d"$time" +"%a %d %b %Y %H:%M:%S UTC" )
            message=$(echo ${row} | base64 --decode | jq -r '.message' | tr -d \''"\')
            message="${message%?}"
            ticket_number=$(echo ${message} | awk '{print $1}' | sed 's/://g')

            if [[ "$message" == *"CSAR"* ]] || [[ "$message" == *"INF"* ]] || [[ "$message" == *"DEVTASKS"* ]] || [[ "$message" == *"CCF"* ]]
            then
              ticket_number=$(echo ${message} | awk '{print $1}' | sed 's/://g')
              jira_ticket="<https://cropster.atlassian.net/browse/$ticket_number| $message>"
            else
              jira_ticket="$message"
            fi

            # For every element of the commit, create the json message structure
            single_commit_info=$(printf  "%s" "
            {\"type\": \"section\",\"text\": {\"type\": \"mrkdwn\",\"text\": \"$jira_ticket \n$author, $time_fmt \"}},{\"type\": \"divider\"},")
            slack_message_body="${slack_message_body}${single_commit_info}"
        done
        slack_message_body="${slack_message_body%?}]}" #Last formatting step to match commas and brackets

        #Treatment of large messages (more than 50 json blocks)
        header_count=`grep -o "header" \<<< "$slack_message_body" | wc -l`
        section_count=`grep -o "section" \<<< "$slack_message_body" | wc -l`
        divider_count=`grep -o "divider" \<<< "$slack_message_body" | wc -l`
        blocks=$(($header_count+$section_count+$divider_count))
        messages_needed="scale=3; $blocks/50" | bc -l
        rounded_mesages=$(((blocks+49)/50))

        # Json blocks are less than 50
        if [[ $rounded_mesages -eq 1 ]]
        then
          echo $slack_message_body
          echo "Sending only one message to Slack..."
          curl -X POST -H 'Content-type: application/json' --data  "$slack_message_body" <<parameters.slack_channel>>
        fi

        # Json blocks are more than 50
        if [[ $rounded_mesages -eq 2 ]]
        then
          #First, the payload is splitted in three equal parts
          echo "The message contains $blocks blocks, payload splited in three"
          first_split_index=$((${#slack_message_body}/3))
          first_splitted_message=${slack_message_body:$first_split_index}
          second_split_index=$(((${#slack_message_body}/3)*2))
          second_split_message=${slack_message_body:$second_split_index}

          #The beginning of the closest json block after each splitting point is found, to match the JSON structure
          block_divider='{"type": "section"'
          rel_first_split_offset_index=${first_split_message%%$block_divider*}
          split_first_block_index=$((${#rel_first_split_offset_index} + $first_split_index))
          rel_second_split_offset_index=${second_split_message%%$block_divider*}
          split_second_block_index=$((${#rel_second_split_offset_index} + $second_split_index))
          second_block_length=$(($split_second_block_index-$split_first_block_index))

          #The payload gets splitted twice, to create 3 blocks. Then, each block gets their limits set to match the JSON structure
          echo "First block index end: $split_first_block_index"
          echo "Second block index end: $split_second_block_index"
          echo "Second block length: $second_block_length"

          # First part of the message
          first_block=${slack_message_body:0:$split_first_block_index}"]}"
          first_block=$(echo $first_block) #Needed to format the message
          echo $first_block
          echo "Sending first part of the message to Slack..."
          curl -X POST -H 'Content-type: application/json' --data  "$first_block" <<parameters.slack_channel>>

          # Second part of the message
          second_block=${slack_message_body:$split_first_block_index:$second_block_length}"]}"
          second_block=$(echo "{\"blocks\":[$second_block")
          echo $second_block
          echo "Sending second part of the message to Slack..."
          curl -X POST -H 'Content-type: application/json' --data  "$second_block" <<parameters.slack_channel>>

          # Third part of the message
          third_block=${slack_message_body:$split_second_block_index}
          third_block=$(echo "{\"blocks\":[$third_block")
          echo $third_block
          echo "Sending third part of the message to Slack..."
          curl -X POST -H 'Content-type: application/json' --data  "$third_block" <<parameters.slack_channel>>
        fi
